import pandas as pd
from snakemake.utils import validate, min_version
from os.path import join
import numpy as np

##### set minimum snakemake version #####
min_version("6.15.1")


##### load config and sample sheets #####


# configfile: "config/workflow_unit_test.yaml"


validate(config, schema="schemas/config.schema.yaml")

samples = pd.read_table(config["samples"]).set_index("sample", drop=False)
samples = samples.replace(np.nan, "NA")
validate(samples, schema="schemas/samples.schema.yaml")

if config["DKFZ"]:
    units = pd.read_table(config["units"]).set_index("sample", drop=False)
    SEQ_TYPE = config["SEQ_TYPE"]
    if "sample_unit" not in units.columns:
        units.sample_unit = units.sample
else:
    units = samples

BASE_DATA_DIR = config["dirs"]["BASE_DATA_DIR"]
BASE_ANALYSIS_DIR = config["dirs"]["BASE_ANALYSIS_DIR"]
CONTRASTS = config["diffexp"]["contrasts"]
##### target rules #####


include: "rules/common.smk"


salmon_files = []

if config["run_mitch"]:
    salmon_files.extend(
        [
            expand(
                join(
                    BASE_ANALYSIS_DIR,
                    "results/diffexp/mitch/{condition}_mitch_report.html",
                ),
                condition=config["run_mitch"],
            )
        ]
    )

if config["run_carnival"]["vanilla"]:
    CARNIVAL_COND = config["run_carnival"]["cond_to_run"]
    print(CARNIVAL_COND)
    if False:
        salmon_files.extend(
            expand(
                join(
                    BASE_ANALYSIS_DIR,
                    "results/reports/{type}/{condition}/join_report.html",
                ),
                type=["carnival"],
                condition=CARNIVAL_COND.keys(),
            )
        )

    for cond in CARNIVAL_COND:
        salmon_files.extend(
            expand(
                join(
                    BASE_ANALYSIS_DIR,
                    "results/reports/{type}/{condition}/{contrast}_results.html",
                ),
                contrast=CARNIVAL_COND[cond],
                condition=cond,
                type=["carnival"],
            )
        )
if config["run_carnival"]["inverse"]:
    CARNIVAL_COND = config["run_carnival"]["cond_to_run"]
    if config["run_carnival"]["joint_rep"]:
        for cond in CARNIVAL_COND:
            salmon_files.extend(
                expand(
                    join(
                        BASE_ANALYSIS_DIR,
                        "results/reports/{type}/{condition}/join_report.html",
                    ),
                    type=["inversecarnival"],
                    condition=cond,
                )
            )
    for cond in CARNIVAL_COND:
        salmon_files.extend(
            expand(
                join(
                    BASE_ANALYSIS_DIR,
                    "results/reports/{type}/{condition}/{contrast}_results.html",
                ),
                contrast=CARNIVAL_COND[cond],
                condition=cond,
                type=["inversecarnival"],
            )
        )
if config["run_carnival"]["sample"]:
    salmon_files.extend(
        [join(BASE_ANALYSIS_DIR, "reports/carnival/carnival_sample_report.html")]
    )

if config["DKFZ"]:
    salmon_files.extend(
        [
            join(BASE_ANALYSIS_DIR, "qc/multiqc_report.html"),
            join(BASE_ANALYSIS_DIR, "fpkm/all.xlsx"),
        ]
    )

diffexp_files = get_diffxp_files()


rule all:
    input:
        diffexp_files,
        salmon_files,


##### setup singularity #####
# this container defines the underlying OS for each job when using the workflow
# with --use-conda --use-singularity
container: "docker://continuumio/miniconda3"


containerized: "docker://chheyer/multiconditiondeseq2enrichment:1.1.0"


##### setup report #####


report: "report/workflow.rst"


##### load rules #####


include: "rules/diffexp.smk"
include: "rules/Carnival.smk"


if config["DKFZ"]:

    include: "rules/DKFZ.smk"
